name: Deploy to EC2 and ECR

on:
  push:
    branches: [master]
  workflow_dispatch:

env:
  AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  ECR_REPOSITORY_BACKEND: ${{ secrets.ECR_REPOSITORY_BACKEND }}
  ECR_REPOSITORY_FRONTEND: ${{ secrets.ECR_REPOSITORY_FRONTEND }}
  AWS_HOST: ${{ secrets.AWS_HOST }}
  AWS_USER: ${{ secrets.AWS_USER }}
  PROJECT_ROOT: /home/${{ secrets.AWS_USER }}/jupyterm8
  GH_PAT: ${{ secrets.GH_PAT }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push backend image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG ./backend
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG

      - name: Build, tag, and push frontend image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG ./frontend
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG

      - name: Copy docker-compose.yml to EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          AWS_HOST: ${{ secrets.AWS_HOST }}
          AWS_USER: ${{ secrets.AWS_USER }}
          PROJECT_ROOT: /home/${{ secrets.AWS_USER }}/jupyterm8
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          scp -o StrictHostKeyChecking=no -i private_key docker-compose.yml $AWS_USER@$AWS_HOST:$PROJECT_ROOT/

      - name: Deploy to EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          GH_PAT: ${{ secrets.GH_PAT }}
          ECR_REPOSITORY_BACKEND: ${{ secrets.ECR_REPOSITORY_BACKEND }}
          ECR_REPOSITORY_FRONTEND: ${{ secrets.ECR_REPOSITORY_FRONTEND }}
          FASTAPI_PORT: ${{ secrets.FASTAPI_PORT }}
          FASTAPI_ALLOW_ORIGINS: ${{ secrets.FASTAPI_ALLOW_ORIGINS }}
          FASTAPI_SSL_KEYFILE: ${{ secrets.FASTAPI_SSL_KEYFILE }}
          FASTAPI_SSL_CERTFILE: ${{ secrets.FASTAPI_SSL_CERTFILE }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          AWS_S3_BUCKET_NAME: ${{ secrets.AWS_S3_BUCKET_NAME }}
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${AWS_USER}@${AWS_HOST} '
            cd ${{ env.PROJECT_ROOT }} || mkdir -p ${{ env.PROJECT_ROOT }} && cd ${{ env.PROJECT_ROOT }};

            # Export environment variables
            export ECR_REGISTRY=${ECR_REGISTRY}
            export ECR_REPOSITORY_BACKEND=${ECR_REPOSITORY_BACKEND}
            export ECR_REPOSITORY_FRONTEND=${ECR_REPOSITORY_FRONTEND}
            export IMAGE_TAG=${IMAGE_TAG}
            export FASTAPI_PORT=${FASTAPI_PORT}
            export FASTAPI_ALLOW_ORIGINS=${FASTAPI_ALLOW_ORIGINS}
            export FASTAPI_SSL_KEYFILE=${FASTAPI_SSL_KEYFILE}
            export FASTAPI_SSL_CERTFILE=${FASTAPI_SSL_CERTFILE}
            export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
            export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
            export AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
            export AWS_S3_BUCKET_NAME=${AWS_S3_BUCKET_NAME}
            export NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}

            # Pull the latest images from ECR and start the containers with environment variables passed directly
            ECR_REGISTRY=${ECR_REGISTRY} \
            ECR_REPOSITORY_BACKEND=${ECR_REPOSITORY_BACKEND} \
            ECR_REPOSITORY_FRONTEND=${ECR_REPOSITORY_FRONTEND} \
            IMAGE_TAG=${IMAGE_TAG} \
            FASTAPI_PORT=${FASTAPI_PORT} \
            FASTAPI_ALLOW_ORIGINS=${FASTAPI_ALLOW_ORIGINS} \
            FASTAPI_SSL_KEYFILE=${FASTAPI_SSL_KEYFILE} \
            FASTAPI_SSL_CERTFILE=${FASTAPI_SSL_CERTFILE} \
            AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} \
            AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} \
            AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION} \
            AWS_S3_BUCKET_NAME=${AWS_S3_BUCKET_NAME} \
            NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL} \
            docker-compose up -d
          '
