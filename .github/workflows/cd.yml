name: Deploy to EC2 and ECR

on:
  push:
    branches: [master]
  workflow_dispatch:

env:
  AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  ECR_REPOSITORY_BACKEND: ${{ secrets.ECR_REPOSITORY_BACKEND }}
  ECR_REPOSITORY_FRONTEND: ${{ secrets.ECR_REPOSITORY_FRONTEND }}
  AWS_HOST: ${{ secrets.AWS_HOST }}
  AWS_USER: ${{ secrets.AWS_USER }}
  PROJECT_ROOT: /home/${{ secrets.AWS_USER }}/jupyterm8
  GH_PAT: ${{ secrets.GH_PAT }}
  NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Check and prune disk space on EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          AWS_HOST: ${{ secrets.AWS_HOST }}
          AWS_USER: ${{ secrets.AWS_USER }}
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${AWS_USER}@${AWS_HOST} '
            AVAILABLE_SPACE=$(df --output=avail / | tail -n1)
            MIN_REQUIRED_SPACE=2097152 # 2GB in KB
            if [ "$AVAILABLE_SPACE" -lt "$MIN_REQUIRED_SPACE" ]; then
              echo "Not enough disk space. Pruning Docker resources..."
              docker system prune -f
              AVAILABLE_SPACE_AFTER_PRUNE=$(df --output=avail / | tail -n1)
              if [ "$AVAILABLE_SPACE_AFTER_PRUNE" -lt "$MIN_REQUIRED_SPACE" ]; then
                echo "Error: Still not enough disk space after pruning. At least 2GB is required."
                exit 1
              fi
            fi
          '

      - name: (backend) Build, tag, and push backend image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG ./backend
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG

      - name: (frontend) Build, tag, and push frontend image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
        run: |
          docker build --build-arg NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL} -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG ./frontend
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG

      - name: Copy docker-compose.yml and nginx to EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          AWS_HOST: ${{ secrets.AWS_HOST }}
          AWS_USER: ${{ secrets.AWS_USER }}
          PROJECT_ROOT: /home/${{ secrets.AWS_USER }}/jupyterm8
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          scp -o StrictHostKeyChecking=no -i private_key docker-compose.yml $AWS_USER@$AWS_HOST:$PROJECT_ROOT/docker-compose.yml
          scp -o StrictHostKeyChecking=no -i private_key nginx.conf $AWS_USER@$AWS_HOST:$PROJECT_ROOT/nginx.conf
          scp -o StrictHostKeyChecking=no -i private_key default.conf $AWS_USER@$AWS_HOST:$PROJECT_ROOT/default.conf

      - name: Deploy to EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          GH_PAT: ${{ secrets.GH_PAT }}
          ECR_REPOSITORY_BACKEND: ${{ secrets.ECR_REPOSITORY_BACKEND }}
          ECR_REPOSITORY_FRONTEND: ${{ secrets.ECR_REPOSITORY_FRONTEND }}
          FASTAPI_PORT: ${{ secrets.FASTAPI_PORT }}
          FASTAPI_ALLOW_ORIGINS: ${{ secrets.FASTAPI_ALLOW_ORIGINS }}
          FASTAPI_SSL_KEYFILE: ${{ secrets.FASTAPI_SSL_KEYFILE }}
          FASTAPI_SSL_CERTFILE: ${{ secrets.FASTAPI_SSL_CERTFILE }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          AWS_S3_BUCKET_NAME: ${{ secrets.AWS_S3_BUCKET_NAME }}
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${AWS_USER}@${AWS_HOST} '
            cd ${{ env.PROJECT_ROOT }} || mkdir -p ${{ env.PROJECT_ROOT }} && cd ${{ env.PROJECT_ROOT }};

            echo "Setting AWS environment variables..."
            export AWS_ACCESS_KEY_ID=${{secrets.AWS_ACCESS_KEY_ID}}
            export AWS_SECRET_ACCESS_KEY=${{secrets.AWS_SECRET_ACCESS_KEY}}
            export AWS_DEFAULT_REGION=${{secrets.AWS_DEFAULT_REGION}}

            echo "Logging into AWS ECR..."
            aws ecr get-login-password --region ${{ secrets.AWS_DEFAULT_REGION }} | docker login --username AWS --password-stdin  ${{ steps.login-ecr.outputs.registry }}

            echo "Stopping and removing existing containers..."
            docker-compose down

            echo "Starting new containers with updated environment variables..."

            ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }} \
            ECR_REPOSITORY_BACKEND=${{ secrets.ECR_REPOSITORY_BACKEND }} \
            ECR_REPOSITORY_FRONTEND=${{ secrets.ECR_REPOSITORY_FRONTEND }} \
            IMAGE_TAG=${{ github.sha }} \
            FASTAPI_PORT=${{ secrets.FASTAPI_PORT }} \
            FASTAPI_ALLOW_ORIGINS=${{ secrets.FASTAPI_ALLOW_ORIGINS }} \
            FASTAPI_SSL_KEYFILE=${{ secrets.FASTAPI_SSL_KEYFILE }} \
            FASTAPI_SSL_CERTFILE=${{ secrets.FASTAPI_SSL_CERTFILE }} \
            AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            AWS_DEFAULT_REGION=${{ secrets.AWS_DEFAULT_REGION }} \
            AWS_S3_BUCKET_NAME=${{ secrets.AWS_S3_BUCKET_NAME }} \
            NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }} \
            docker-compose up -d
          '
